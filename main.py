import time
import imaplib
import email
import json
import os
import logging
import requests
from email.header import decode_header
from g4f.client import Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
CONFIG_FILE = "processed_emails.json"

def load_processed_emails():
    try:
        with open(CONFIG_FILE, "r") as f:
            return set(json.load(f))
    except (FileNotFoundError, json.JSONDecodeError):
        return set()

def save_processed_email(email_id):
    processed = load_processed_emails()
    processed.add(email_id)
    with open(CONFIG_FILE, "w") as f:
        json.dump(list(processed), f)

def decode_mime_header(header):
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç MIME-–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–º—É –ø–∏—Å—å–º–∞).

    :param header: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞.
    :return: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
    """
    decoded_parts = decode_header(header)
    decoded_str = ""
    for part, encoding in decoded_parts:
        if isinstance(part, bytes):
            decoded_str += part.decode(encoding or "utf-8", errors="replace")
        else:
            decoded_str += part
    return decoded_str

def fetch_unread_emails(username, password, imap_server, bot_token, chat_id):
    processed_emails = load_processed_emails()
    mail = imaplib.IMAP4_SSL(imap_server)
    mail.login(username, password)
    mail.select("inbox")

    # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
    status, messages = mail.search(None, 'UNSEEN')
    if status == 'OK' and messages[0]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
        email_ids = messages[0].split()
        logging.info(f"Found {len(email_ids)} unread emails.")
    else:
        email_ids = []  # –ï—Å–ª–∏ –ø–∏—Å–µ–º –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        logging.info("No unread emails found.")

    emails = []
    for e_id in email_ids:
        e_id_decoded = e_id.decode()
        if e_id_decoded in processed_emails:
            logging.info(f"Email {e_id_decoded} already processed. Skipping.")
            continue

        try:
            _, msg_data = mail.fetch(e_id, "(RFC822)")
            for response_part in msg_data:
                if isinstance(response_part, tuple):
                    msg = email.message_from_bytes(response_part[1])
                    subject = msg["Subject"]
                    if subject:
                        subject = decode_mime_header(subject)  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞
                    else:
                        subject = "–ë–µ–∑ —Ç–µ–º—ã"
                    logging.info(f"Processing email with ID: {e_id_decoded}, Subject: {subject}")

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
                    text = ""
                    if msg.is_multipart():
                        for part in msg.walk():
                            if part.get_content_type() == "text/plain":
                                text += part.get_payload(decode=True).decode("utf-8", errors="replace")
                    else:
                        text = msg.get_payload(decode=True).decode("utf-8", errors="replace")

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ GPT-4
                    analysis_result = analyze_with_gpt4(text, "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑–≤–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–∏–µ —Ç–µ–∑–∏—Å—ã –∏ HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                    logging.info(f"Analysis result: {analysis_result}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ Telegram
                    send_to_telegram(bot_token, chat_id, subject, analysis_result)
                    logging.info(f"Email {e_id_decoded} processed and sent to Telegram.")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–∏—Å—å–º–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                    save_processed_email(e_id_decoded)
                    logging.info(f"Email {e_id_decoded} marked as processed.")

        except Exception as e:
            logging.error(f"Error processing email {e_id_decoded}: {str(e)}")

    return emails

def analyze_with_gpt4(text, prompt):
    try:
        client = Client()
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": text}
            ]
        )
        result = response.choices[0].message.content
        logging.info(f"GPT-4 analysis successful: {result}")
        return result
    except Exception as e:
        logging.error(f"Error analyzing text with GPT-4: {str(e)}")
        return None

def split_message(message, max_length=4096):
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É.

    :param message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :param max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4096 —Å–∏–º–≤–æ–ª–æ–≤).
    :return: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    if len(message) <= max_length:
        return [message]

    parts = []
    while len(message) > 0:
        part = message[:max_length]
        parts.append(part)
        message = message[max_length:]
    return parts

def send_to_telegram(bot_token, chat_id, subject, message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —ç–º–æ–¥–∑–∏.

    :param bot_token: –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞.
    :param chat_id: ID —á–∞—Ç–∞.
    :param subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML –∏ —ç–º–æ–¥–∑–∏
        formatted_message = (
            f"üîî <b>–¢–µ–º–∞:</b> {subject}\n\n"
            f"üìù <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            f"<i>{message}</i>"
        )

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        message_parts = split_message(formatted_message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for part in message_parts:
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            payload = {
                "chat_id": chat_id,
                "text": part,
                "parse_mode": "HTML"  # –í–∫–ª—é—á–∞–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..
            }
            response = requests.post(url, json=payload)
            logging.info(f"Message part sent to Telegram: {response.json()}")

        return True
    except Exception as e:
        logging.error(f"Error sending message to Telegram: {str(e)}")
        return False

def escape_markdown(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2.

    :param text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
    :return: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    escape_chars = "_*[]()~`>#+-=|{}.!"
    return "".join(f"\\{char}" if char in escape_chars else char for char in text)

def load_config():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    """
    config = {
        "imap_server": os.getenv("IMAP_SERVER"),
        "email_username": os.getenv("EMAIL_USERNAME"),
        "email_password": os.getenv("EMAIL_PASSWORD"),
        "telegram_bot_token": os.getenv("TELEGRAM_BOT_TOKEN"),
        "telegram_chat_id": os.getenv("TELEGRAM_CHAT_ID"),
    }
    if None in config.values():
        raise ValueError("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã.")
    return config

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    logging.info("Starting the script...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    config = load_config()

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    IMAP_SERVER = config["imap_server"]
    EMAIL_USERNAME = config["email_username"]
    EMAIL_PASSWORD = config["email_password"]
    TELEGRAM_BOT_TOKEN = config["telegram_bot_token"]
    TELEGRAM_CHAT_ID = config["telegram_chat_id"]

    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑–≤–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–∏–µ —Ç–µ–∑–∏—Å—ã –∏ HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."

    while True:
        try:
            emails = fetch_unread_emails(EMAIL_USERNAME, EMAIL_PASSWORD, IMAP_SERVER, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)

            for e_id, email_msg in emails:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞
                    subject = email_msg["Subject"]
                    if subject:
                        subject = decode_mime_header(subject)  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞
                    else:
                        subject = "–ë–µ–∑ —Ç–µ–º—ã"

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
                    text = ""
                    if email_msg.is_multipart():
                        for part in email_msg.walk():
                            if part.get_content_type() == "text/plain":
                                text += part.get_payload(decode=True).decode("utf-8", errors="replace")
                    else:
                        text = email_msg.get_payload(decode=True).decode("utf-8", errors="replace")

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ GPT-4
                    analysis_result = analyze_with_gpt4(text, prompt)
                    recommendation = analysis_result if analysis_result else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é."

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ Telegram —Å —Ç–µ–º–æ–π –ø–∏—Å—å–º–∞
                    send_to_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, subject, recommendation)
                    save_processed_email(e_id.decode())

                except Exception as e:
                    logging.error(f"Error processing email {e_id}: {str(e)}")

            time.sleep(30)

        except Exception as e:
            logging.error(f"Critical error: {str(e)}")
            time.sleep(60)

if __name__ == "__main__":
    main()